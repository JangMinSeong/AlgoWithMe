import org.hidetake.gradle.swagger.generator.GenerateSwaggerUI

buildscript {
	ext {
		queryDslVersion = "5.0.0"
		restdocsApiSpecVersion = '0.18.2'
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.4'
	id 'io.spring.dependency-management' version '1.1.4'

	id "org.asciidoctor.jvm.convert" version "3.3.2"
	// epages-restdocs 플러그인 추가
	id 'com.epages.restdocs-api-spec' version "${restdocsApiSpecVersion}"
	//swagger generator 플러그인 추가
	id 'org.hidetake.swagger.generator' version '2.18.2'
}

group = 'com.ssafy'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '21'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	asciidoctorExt
}

repositories {
	mavenCentral()
}

dependencies {

	// web & security
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'

	// MySQL
	runtimeOnly 'com.mysql:mysql-connector-j'

	// Maria
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

	// JPA
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	// lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// devtools
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	// Redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	// MongoDB
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
//	testImplementation 'io.projectreactor:reactor-test'

	// jasypt
	implementation group: 'com.github.ulisesbocchio', name: 'jasypt-spring-boot-starter', version: '3.0.5'

	// JWT
	implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'

	// querydsl
	implementation "com.querydsl:querydsl-jpa:${queryDslVersion}:jakarta"
	implementation "com.querydsl:querydsl-core:${queryDslVersion}"
	annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// H2 & JDBC(for H2)
	runtimeOnly 'com.h2database:h2'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'

	// validation
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// Swagger + REST Docs
	testImplementation "com.epages:restdocs-api-spec-mockmvc:${restdocsApiSpecVersion}"
	asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'com.squareup.okhttp3:mockwebserver'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.4.0'

	// Spring Embedded Redis for Test
	implementation group: 'it.ozimov', name: 'embedded-redis', version: '0.7.2'

	// file-upload
	implementation 'commons-fileupload:commons-fileupload:1.4'

	// socket
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
}

def querydslDir = 'src/main/generated'

sourceSets {
	main.java.srcDirs += [ querydslDir ]
}

tasks.withType(JavaCompile).configureEach {
	options.getGeneratedSourceOutputDirectory().set(file(querydslDir))
}

clean.doLast {
	file(querydslDir).deleteDir()
}

openapi3 {
	servers = [
			{ url = "https://k10d205.p.ssafy.io/api" },
			{ url = "http://localhost:8080" },
			{ url = "https://localhost:8080" },
			{ url = "http://localhost:8081" },
			{ url = "https://localhost:8081" }
	]
	title = "Algowithme API 문서"
	description = "Algowithme API 문서입니다."
	version = "0.0.1"
	outputFileNamePrefix = 'open-api-3.0.1'
	format = 'json'

	outputDirectory = 'build/resources/main/static/docs'
}

tasks.withType(GenerateSwaggerUI).configureEach {
	dependsOn 'openapi3'

	delete file('src/main/resources/static/docs/')
	copy {
		from "build/resources/main/static/docs"
		into "src/main/resources/static/docs/"
	}
}

tasks.register("ext") {
	snippetsDir = file('build/generated-snippets')
}

tasks.named('test') {
	systemProperty "JASYPT_KEY", System.getProperty("JASYPT_KEY")
	useJUnitPlatform()

	outputs.dir 'snippetsDir'
}

asciidoctor.doFirst {
	delete file('src/main/resources/static/docs')
}

// asciidoctor 작업을 구성
tasks.named("asciidoctor") {
	inputs.dir 'snippetsDir'
	configurations 'asciidoctorExt'
	dependsOn test
}

tasks.named("bootJar") {
	dependsOn asciidoctor
	from("${asciidoctor.outputDir}") {
		into 'static/docs'
	}
	dependsOn(':openapi3')
}

tasks.register('copyDocument', Copy) {
	dependsOn asciidoctor
	from file(layout.buildDirectory.dir("docs/asciidoc").get().asFile)
	into file("src/main/resources/static/docs")
}

tasks.named("build") {
	dependsOn copyDocument
}
